/**
 * TODO: Explain the naming convention for header line in a CSV file; No commas; Ends with "Int", "Dec", "Bool", "Char", "Str"
 * TODO: What if there is no header line.
 * TODO: What if the file doesn't exist.
 * TODO: What if the wrapped data is heterogeneous.
 * TODO: Perform some basic checks for the row data type and if it is the same as the rest of the CSV file.
 * TODO: Maybe it would be useful to write the data from a column even if it exceeds the current length of the CSV file. DONE
 * TODO: Fix the above problem for addRow.
 */

uses data.String

component provides CSVUtilExtension requires data.csv.CSVParser parser, io.Output out, io.Input in, io.File,
data.IntUtil iu, data.DecUtil du, util.Random rand, time.ClockHD, io.TextFile, io.FileSystem fs, data.StringUtil su, util.Math math,
stats.StatCore sc {

    // Used to check the types of the columns of the CSV file.
    const int dataTypeSizes[] = new int[](1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024)

    /**
     * Add a column to a CSV file.
     */
    bool CSVUtilExtension:addColumn(char filename[], bool hasHeaderLine, char separators[], Data wrappedColumn[],
                                    opt char columnName[] = "NewColumn", opt int columnNumber, opt bool limitData = true) {
        // Infer the types of the columns in the CSV file and build the data template type.
        Type templateType = inferCSVTemplate(filename)

        int templateLength = templateType.fields.arrayLength

        // Parse the CSV file.
        Data csvData[] = parser.parseDocument(new TextFile(filename, File.WRITE), hasHeaderLine, separators, new Data() from templateType)

        if (wrappedColumn.arrayLength == 0 || (limitData && wrappedColumn.arrayLength < csvData.arrayLength)) {
            throw new Exception("Parameter \"wrappedColumn\" has insufficient length of $(wrappedColumn.arrayLength).")
            return false
            }
        
        // Save the column's cell type for convenience.
        Type columnType = typeof(wrappedColumn[0]).fields[0].type

        // Check if the new column's name is valid.
        char correctSuffix[]

        if (columnType.class == Type.INTEGER)
            correctSuffix = "Int$(columnType.size)"
            else if (columnType.class == Type.DECIMAL)
            correctSuffix = "Dec$(columnType.size)"
            else if (columnType.class == Type.ARRAY && columnType.flags == Type.F_CHAR)
            correctSuffix = "Str"
        
        if (!su.endsWith(columnName, correctSuffix)) {
            columnName = "$(columnName)$(correctSuffix)"
            }

        // Append the new column if no preference is expressed.
        if (!isset columnNumber) {
            columnNumber = templateLength
            }

        // Construct the new data type for the resulting CSV file.
        Type newTemplateType

        if (columnNumber == 0) {
            newTemplateType = new Type(Type.DATA, 0, 0,
                                       new Field[](new Field(columnType, columnName), templateType.fields))
            }
            else if (columnNumber < templateLength) {
            newTemplateType = new Type(Type.DATA, 0, 0,
                                       new Field[](dana.sub(templateType.fields, 0, columnNumber - 1),
                                                   new Field(columnType, columnName),
                                                   dana.sub(templateType.fields, columnNumber, templateLength - 1)))
            }
            else if (columnNumber == templateLength) {
            newTemplateType = new Type(Type.DATA, 0, 0,
                                       new Field[](templateType.fields, new Field(columnType, columnName)))
            }
            else {
            throw new Exception("Parameter \"columnNumber\" exceeds the upper index bound of: $(templateLength).")
            return false
            }

        // Figure out how long the new CSV file is going to be.
        int newCsvDataLength

        if (limitData) {
            newCsvDataLength = csvData.arrayLength
            }
            else {
            newCsvDataLength = sc.max(new dec[](du.decFromString("$(csvData.arrayLength)"), du.decFromString("$(wrappedColumn.arrayLength)")))
            }

        // Construct the new CSV data and copy the data across.
        Data newCsvData[] = new Data[newCsvDataLength] from newTemplateType

        for (int i = 0; i < newCsvDataLength; i++) {
            newCsvData[i] = new Data() from newTemplateType

            // Copy the values before the new column.
            for (int j = 0; j < columnNumber; j++) {
                if (i < csvData.arrayLength) {
                    newCsvData[i]:.j = csvData[i]:.j
                    }
                    else if (newTemplateType.fields[j].type.class == Type.ARRAY && 
                             newTemplateType.fields[j].type.fields[0].type.flags == Type.F_CHAR){
                    newCsvData[i]:.j = "null"
                    }
                    else if (newTemplateType.fields[j].type.class == Type.INTEGER) {
                    newCsvData[i]:.j = 0
                    }
                    else if (newTemplateType.fields[j].type.class == Type.DECIMAL) {
                    newCsvData[i]:.j = 0.0
                    }
                    else {
                    throw new Exception("Unexpected column type at column number: $(j).")
                    return false
                    }
                }

            // Copy the new column value.
            if (i < wrappedColumn.arrayLength) {
                newCsvData[i]:.columnNumber = wrappedColumn[i]:.0
                }
                else if (columnType.class == Type.ARRAY && columnType.fields[0].type.flags == Type.F_CHAR) {
                newCsvData[i]:.columnNumber = "null"
                }
                else if (columnType.class == Type.INTEGER) {
                newCsvData[i]:.j = 0
                }
                else if (columnType.class == Type.DECIMAL) {
                newCsvData[i]:.j = 0.0
                }
                else {
                throw new Exception("Unexpected column type at column number: $(columnNumber).")
                return false
                }

            // Copy the values after the new column.
            for (int j = columnNumber; j < templateLength; j++) {
                if (i < csvData.arrayLength) {
                    newCsvData[i]:.(j + 1) = csvData[i]:.j
                    }
                    else if (newTemplateType.fields[j].type.class == Type.ARRAY && 
                             newTemplateType.fields[j].type.fields[0].type.flags == Type.F_CHAR){
                    newCsvData[i]:.(j + 1) = "null"
                    }
                    else if (newTemplateType.fields[j].type.class == Type.INTEGER) {
                    newCsvData[i]:.(j + 1) = 0
                    }
                    else if (newTemplateType.fields[j].type.class == Type.DECIMAL) {
                    newCsvData[i]:.(j + 1) = 0.0
                    }
                    else {
                    throw new Exception("Unexpected column type at column number: $(j).")
                    return false
                    }
                }
            }

        // Delete the file in case the new file is somehow shorter than the original.
        fs.delete(filename)
        
        // Write back to the original file, while overriding the current contents.
        return parser.writeDocument(new TextFile(filename, File.WRITE), true, ",", newCsvData)
        }

    /**
     * Add a row to a CSV file.
     */
    bool CSVUtilExtension:addRow(char filename[], bool hasHeaderLine, char separators[], Data wrappedRow,
                                 opt int rowNumber, opt bool limitData = true) {
        // Infer the types of the columns in the CSV file and build the data template type.
        Type templateType = inferCSVTemplate(filename)

        int templateLength = templateType.fields.arrayLength

        // Parse the CSV file.
        Data csvData[] = parser.parseDocument(new TextFile(filename, File.WRITE), hasHeaderLine, separators, new Data() from templateType)

        // Check if the new row's dimensions are valid.
        if (typeof(wrappedRow).fields.arrayLength == 0 || typeof(wrappedRow).fields.arrayLength < templateLength) {
            throw new Exception("Parameter \"wrappedRow\" has insufficient length of $(typeof(wrappedRow).fields.arrayLength).")
            return false
            }

        // Append the new row if no preference is expressed.
        if (!isset rowNumber) {
            rowNumber = csvData.arrayLength - 1
            }
            else if (rowNumber > csvData.arrayLength) {
            throw new Exception("Parameter \"rowNumber\" exceeds the upper index bound of: $(csvData.arrayLength).")
            return false
            }

        // Construct the new CSV data and copy the data across.
        if (rowNumber == 0) {
            csvData = new Data[](wrappedRow, csvData) from templateType
            }
            else if (rowNumber < csvData.arrayLength - 1) {
            csvData = new Data[](dana.sub(csvData, 0, rowNumber - 1), wrappedRow,
                                 dana.sub(csvData, rowNumber, csvData.arrayLength - 1)) from templateType
            }
            else if (rowNumber == csvData.arrayLength - 1) {
            csvData = new Data[](csvData, wrappedRow) from templateType
            }
            else {
            throw new Exception("Parameter \"rowNumber\" exceeds the upper index bound of: $(csvData.arrayLength - 1).")
            return false
            }

        // Delete the file in case the new file is somehow shorter than the original.
        fs.delete(filename)
        
        // Write back to the original file, while overriding the current contents.
        return parser.writeDocument(new TextFile(filename, File.WRITE), true, ",", csvData)
        }

    /**
     * Construct a type that reflects the data template of a row of a CSV file.
     */
    Type CSVUtilExtension:inferCSVTemplate(char filename[]) {
        // Infer the types of the columns in the CSV file and build the data template.
        Type templateType = new Type(Type.DATA, 0, 0)

        // Get the header line.
        TextFile csvFile = new TextFile(filename, File.WRITE)
        char headerLine[] = csvFile.readLine()

        String columnNames[] = su.explode(headerLine, ",")

        for (int i = 0; i < columnNames.arrayLength; i++) {
            // Extract the datatype information from the column names.
            for (int j = 0; j < dataTypeSizes.arrayLength; j++) {
                if (su.endsWith(su.trim(columnNames[i].string), "Int$(dataTypeSizes[j])")) {
                    templateType.fields = new Field[](templateType.fields,
                                                    new Field(new Type(Type.INTEGER, 0, math.power(2, j)),
                                                                su.trim(columnNames[i].string)))
                    break
                    }
                    else if (su.endsWith(su.trim(columnNames[i].string), "Dec$(dataTypeSizes[j])")) {
                    templateType.fields = new Field[](templateType.fields,
                                                    new Field(new Type(Type.DECIMAL, 0, math.power(2, j)),
                                                                su.trim(columnNames[i].string)))
                    break
                    }
                    else if (su.endsWith(su.trim(columnNames[i].string), "Str")) {
                    Type charArrayType = new Type(Type.ARRAY, 0, 0, new Field(new Type(Type.INTEGER, Type.F_CHAR, 1)))
                    templateType.fields = new Field[](templateType.fields, new Field(charArrayType, su.trim(columnNames[i].string)))
                    break
                    }
                    else if (j == dataTypeSizes.arrayLength - 1) {
                    throw new Exception("Unsupported CSV data type at column: $(i).")
                    return null
                    }
                }
            }

        // Clean up.
        csvFile.close()

        return templateType
        }

    /**
     * Wrap any integer size array in a Data array.
     * Usage: Pass an integer array with ints of size X as follows:
     *      cue.wrapIntArray(new int512[](myArrayIntX), X)
     */
    Data[] CSVUtilExtension:wrapIntArray(int512 intArray[], int size) {
        // Construct the array cell type.
        Type cellType = new Type(Type.DATA, 0, 0, new Field(new Type(Type.INTEGER, 0, size), "Integer"))
        // Construct the array type.
        // TODO: Not sure if this has to have a size.
        Type arrayType = new Type(Type.ARRAY, 0, 0, new Field[](new Field(cellType, "WrappedInteger")))

        Data curCell = new Data() from cellType
        Data curArray[] = new Data[] from arrayType

        // Construct the array itself.
        for (int i = 0; i < intArray.arrayLength; i++) {
            curCell:.0 = intArray[i]
            curArray = new Data[](curArray, rclone curCell)
            }

        return curArray
        }

    /**
     * Unwrap any integer size array from a Data array.
     */
    int512[] CSVUtilExtension:unwrapIntArray(Data dataArray[]) {
        // Construct the array to be returned.
        int512 curArray[] = new int512[]

        for (int i = 0; i < dataArray.arrayLength; i++) {
            curArray = new int512[](curArray, dataArray[i]:.0)
            }

        return curArray
        }

    /**
     * Wrap any decimal size array in a Data array.
     * Usage: Pass an decimal array with decs of size X as follows:
     *      cue.wrapDecArray(new dec512[](myArrayDecX), X)
     */
    Data[] CSVUtilExtension:wrapDecArray(dec512 decArray[], int size) {
            // Construct the array cell type.
            Type cellType = new Type(Type.DATA, 0, 0, new Field(new Type(Type.DECIMAL, 0, size), "Decimal"))
            // Construct the array type.
            // TODO: Not sure if this has to have a size.
            Type arrayType = new Type(Type.ARRAY, 0, 0, new Field[](new Field(cellType, "WrappedDecimal")))

            Data curCell = new Data() from cellType
            Data curArray[] = new Data[] from arrayType

            out.print("1 \n")

            // Construct the array itself. 
            for (int i = 0; i < decArray.arrayLength; i++) {
                out.print("2 \n")
                curCell:.0 = decArray[i]
                out.print("3 \n")
                curArray = new Data[](curArray, /* rclone */ curCell)
                }

            return curArray
            }

    /**
     * Unwrap any decimal size array from a Data array.
     */
    dec512[] CSVUtilExtension:unwrapDecArray(Data dataArray[]) {
        // Construct the array to be returned.
        dec512 curArray[] = new dec512[]

        for (int i = 0; i < dataArray.arrayLength; i++) {
            curArray = new dec512[](curArray, dataArray[i]:.0)
            }

        return curArray
        }
    }